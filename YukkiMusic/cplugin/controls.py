import logging
from pytgcalls.types import MediaStream, AudioQuality
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ChatMemberStatus
from .play import pytgcalls
from .utils import (
    admin_check,
    close_key,
    is_streaming,
    stream_off,
    stream_on,
    is_active_chat,
)
from .utils.active import _clear_
from YukkiMusic.misc import SUDOERS
from YukkiMusic.utils.thumbnails import gen_thumb
from YukkiMusic.misc import clonedb


@Client.on_message(filters.command(["pause", "resume", "end", "stop"]) & filters.group)
async def pause_str(client, message: Message):
    try:
        await message.delete()
    except:
        pass
    if not await is_active_chat(message.chat.id):
        return await message.reply_text(" ô·¥è·¥õ …™s…¥'·¥õ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥è…¥ ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ.")
    check = await client.get_chat_member(message.chat.id, message.from_user.id)

    if (
        check.status not in [ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR]
        or message.from_user.id not in SUDOERS
    ):
        return await message.reply_text(
            "¬ª  è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥  ô·¥Ä ô è, ·¥ò ü·¥á·¥Äs·¥á s·¥õ·¥Ä è …™…¥  è·¥è·¥ú Ä  ü…™·¥ç…™·¥õs."
        )

    admin = (
        await client.get_chat_member(message.chat.id, message.from_user.id)
    ).privileges
    if not admin.can_manage_video_chats:
        return await message.reply_text(
            "¬ª  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õs, ·¥ò ü·¥á·¥Äs·¥á s·¥õ·¥Ä è …™…¥  è·¥è·¥ú Ä  ü…™·¥ç…™·¥õs."
        )
    if message.text.lower() == "/pause":
        if not await is_streaming(message.chat.id):
            return await message.reply_text(
                "·¥Ö…™·¥Ö  è·¥è·¥ú  Ä·¥á·¥ç·¥á·¥ç ô·¥á Ä ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú  Ä·¥ás·¥ú·¥ç·¥á·¥Ö ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ?"
            )
        await pytgcalls.pause_stream(message.chat.id)
        await stream_off(message.chat.id)
        return await message.reply_text(
            text=f"‚ûª s·¥õ Ä·¥á·¥Ä·¥ç ·¥©·¥Ä·¥ús·¥á·¥Ö ü•∫\n‚îî ô è : {message.from_user.mention} ü•Ä",
        )
    elif message.text.lower() == "/resume":

        if await is_streaming(message.chat.id):
            return await message.reply_text(
                "·¥Ö…™·¥Ö  è·¥è·¥ú  Ä·¥á·¥ç·¥á·¥ç ô·¥á Ä ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú ·¥ò·¥Ä·¥ús·¥á·¥Ö ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ?"
            )
        await stream_on(message.chat.id)
        await pytgcalls.resume_stream(message.chat.id)
        return await message.reply_text(
            text=f"‚ûª s·¥õ Ä·¥á·¥Ä·¥ç  Ä·¥ás·¥ú·¥ç·¥á·¥Ö üí´\n‚îÇ \n‚îî ô è : {message.from_user.mention} ü•Ä",
        )
    elif message.text.lower() == "/end" or message.text.lower() == "/stop":
        try:
            await _clear_(message.chat.id)
            await pytgcalls.leave_group_call(message.chat.id)
        except:
            pass

        return await message.reply_text(
            text=f"‚ûª **s·¥õ Ä·¥á·¥Ä·¥ç ·¥á…¥·¥Ö·¥á·¥Ö/s·¥õ·¥è·¥©·¥©·¥á·¥Ö** ‚ùÑ\n‚îÇ \n‚îî ô è : {message.from_user.mention} ü•Ä",
        )
