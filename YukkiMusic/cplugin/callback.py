from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.enums import ChatMemberStatus
from pytgcalls.types import MediaStream, AudioQuality

from config import *
import logging
from YukkiMusic.utils.thumbnails import gen_thumb
from .utils import (
    HELP_TEXT,
    PM_START_TEXT,
    HELP_DEV,
    HELP_SUDO,
)
from .utils.active import (
    is_active_chat,
    is_streaming,
    stream_on,
    stream_off,
)
from YukkiMusic.misc import SUDOERS
from .utils.active import _clear_
from .utils.inline import close_key
from .play import pytgcalls
from YukkiMusic.misc import clonedb


@Client.on_callback_query(filters.regex("forceclose"))
async def close_(client, CallbackQuery):
    callback_data = CallbackQuery.data.strip()
    callback_request = callback_data.split(None, 1)[1]
    query, user_id = callback_request.split("|")
    if CallbackQuery.from_user.id != int(user_id):
        try:
            return await CallbackQuery.answer(
                "¬ª …™·¥õ' ü ü  ô·¥á  ô·¥á·¥õ·¥õ·¥á Ä …™“ì  è·¥è·¥ú s·¥õ·¥Ä è …™…¥  è·¥è·¥ú Ä  ü…™·¥ç…™·¥õs  ô·¥Ä ô è.", show_alert=True
            )
        except:
            return
    await CallbackQuery.message.delete()
    try:
        await CallbackQuery.answer()
    except:
        return


@Client.on_callback_query(filters.regex("close"))
async def forceclose_command(client, CallbackQuery):
    try:
        await CallbackQuery.message.delete()
    except:
        return
    try:
        await CallbackQuery.answer()
    except:
        pass


@Client.on_callback_query(
    filters.regex(pattern=r"^(resume_cb|pause_cb|skip_cb|end_cb)$")
)
async def admin_cbs(client, query: CallbackQuery):
    try:
        i = await client.get_me()
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        if not await is_active_chat(chat_id, i.id):
            return await query.answer(
                " ô·¥è·¥õ …™s…¥'·¥õ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥è…¥ ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ.", show_alert=True
            )
        check = await client.get_chat_member(chat_id, user_id)
        if (
            check.status not in [ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR]
            or user_id not in SUDOERS
        ):
            return await query.answer("s·¥è Ä Ä è? ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä…¥ ·¥Ö·¥è ·¥õ ú…™s", show_alert=True)
        try:
            await query.answer()
        except:
            pass

        data = query.matches[0].group(1)

        if data == "resume_cb":
            if await is_streaming(query.message.chat.id, i.id):
                return await query.answer(
                    "·¥Ö…™·¥Ö  è·¥è·¥ú  Ä·¥á·¥ç·¥á·¥ç ô·¥á Ä ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú ·¥ò·¥Ä·¥ús·¥á·¥Ö ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ?", show_alert=True
                )
            await stream_on(query.message.chat.id, i.id)
            await pytgcalls.resume_stream(query.message.chat.id)
            await query.message.reply_text(
                text=f"‚ûª s·¥õ Ä·¥á·¥Ä·¥ç  Ä·¥ás·¥ú·¥ç·¥á·¥Ö üí´\n‚îÇ \n‚îî ô è : {query.from_user.mention} ü•Ä",
            )

        elif data == "pause_cb":
            if not await is_streaming(query.message.chat.id, i.id):
                return await query.answer(
                    "·¥Ö…™·¥Ö  è·¥è·¥ú  Ä·¥á·¥ç·¥á·¥ç ô·¥á Ä ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú  Ä·¥ás·¥ú·¥ç·¥á·¥Ö ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ?", show_alert=True
                )
            await stream_off(query.message.chat.id, i.id)
            await pytgcalls.pause_stream(query.message.chat.id)
            await query.message.reply_text(
                text=f"‚ûª s·¥õ Ä·¥á·¥Ä·¥ç ·¥©·¥Ä·¥ús·¥á·¥Ö ü•∫ ‚îî ô è : {query.from_user.mention} ü•Ä",
            )

        elif data == "end_cb":
            try:
                await _clear_(query.message.chat.id, i.id)
                await pytgcalls.leave_group_call(query.message.chat.id)
            except:
                pass
            await query.message.reply_text(
                text=f"‚ûª s·¥õ Ä·¥á·¥Ä·¥ç ·¥á…¥·¥Ö·¥á·¥Ö/s·¥õ·¥è·¥©·¥©·¥á·¥Ö ‚ùÑ ‚îî ô è : {query.from_user.mention} ü•Ä",
            )
            await query.message.delete()

        elif data == "skip_cb":
            get = clonedb.get(query.message.chat.id, i.id)
            if not get:
                try:
                    await _clear_(query.message.chat.id, i.id)
                    await pytgcalls.leave_group_call(query.message.chat.id)
                    await query.message.reply_text(
                        text=f"‚ûª s·¥õ Ä·¥á·¥Ä·¥ç s·¥ã…™·¥©·¥©·¥á·¥Ö ü•∫ ‚îî ô è : {query.from_user.mention} ü•Ä\n**¬ª …¥·¥è ·¥ç·¥è Ä·¥á «´·¥ú·¥á·¥ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ãs …™…¥** {query.message.chat.title}, ** ü·¥á·¥Ä·¥†…™…¥…¢ ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ.**",
                    )
                    return await query.message.delete()
                except:
                    return
            else:
                title = get[0]["title"]
                duration = get[0]["duration"]
                videoid = get[0]["videoid"]
                file_path = get[0]["file_path"]
                req_by = get[0]["req"]
                user_id = get[0]["user_id"]
                get.pop(0)

                stream = MediaStream(file_path, audio_parameters=AudioQuality.HIGH)
                try:
                    await pytgcalls.change_stream(
                        query.message.chat.id,
                        stream,
                    )
                except Exception as ex:
                    logging.exception(ex)
                    await _clear_(query.message.chat.id, i.id)
                    return await pytgcalls.leave_group_call(query.message.chat.id)

                img = await gen_thumb(videoid)
                await query.edit_message_text(
                    text=f"‚ûª s·¥õ Ä·¥á·¥Ä·¥ç s·¥ã…™·¥©·¥©·¥á·¥Ö ü•∫\n‚îî ô è : {query.from_user.mention} ü•Ä",
                )
            return await query.message.reply_photo(
                photo=img,
                caption=f"**‚úÆ ùêí à·¥ß Ä àùõÜ…ó ùêí à ÄùõÜ…ë…±…©≈ã õ ‚úÆ**\n\n**‚úÆ ùêì…©tt…≠ùõÜ ‚úÆ** [{title[:27]}](https://t.me/{i.username}?start=info_{videoid})\n‚Ä£ **‚ú¨ ùêÉ ã…Ω…ë à…©œÉ≈ã ‚úÆ** `{duration}` ·¥ç…™…¥\n**‚ú≠ ùêÅ…£ ‚úÆ** {req_by}",
                reply_markup=close_key,
            )

    except Exception as e:
        logging.exception(e)


@Client.on_callback_query(filters.regex("clone_help"))
async def help_menu(client, query: CallbackQuery):
    try:
        await query.answer()
    except:
        pass

    try:
        helpmenu = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton(text="·¥á·¥†·¥á Ä è·¥è…¥·¥á", callback_data="clone_cb help")],
                [
                    InlineKeyboardButton(text="s·¥ú·¥Ö·¥è", callback_data="clone_cb sudo"),
                    InlineKeyboardButton(text="·¥è·¥°…¥·¥á Ä", callback_data="clone_cb owner"),
                ],
                [
                    InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="clone_home"),
                    InlineKeyboardButton(text="·¥Ñ ü·¥ès·¥á", callback_data="close"),
                ],
            ],
        )
        await query.edit_message_text(
            text=f"‡πè  ú·¥á è {query.from_user.mention}, ü•Ä\n\n·¥ò ü·¥á·¥Äs·¥á ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° “ì·¥è Ä ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä …¢·¥á·¥õ  ú·¥á ü·¥ò.",
            reply_markup=helpmenu,
        )
    except Exception as e:
        logging.exception(e)
        return


@Client.on_callback_query(filters.regex("clone_cb"))
async def open_hmenu(client, query: CallbackQuery):
    callback_data = query.data.strip()
    cb = callback_data.split(None, 1)[1]
    vi = await client.get_me()
    h = vi.mention
    help_back = [
        [InlineKeyboardButton(text="‚ú® s·¥ú·¥©·¥©·¥è Ä·¥õ ‚ú®", url=SUPPORT_GROUP)],
        [
            InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="clone_help"),
            InlineKeyboardButton(text="·¥Ñ ü·¥ès·¥á", callback_data="close"),
        ],
    ]
    keyboard = InlineKeyboardMarkup(help_back)

    try:
        await query.answer()
    except:
        pass

    if cb == "help":
        await query.edit_message_text(HELP_TEXT.format(h), reply_markup=keyboard)
    elif cb == "sudo":
        await query.edit_message_text(HELP_SUDO.format(h), reply_markup=keyboard)
    elif cb == "owner":
        await query.edit_message_text(HELP_DEV.format(h), reply_markup=keyboard)


@Client.on_callback_query(filters.regex("clone_home"))
async def home_fallen(client, query: CallbackQuery):
    try:
        await query.answer()
    except:
        pass
    try:
        vi = await client.get_me()
        pm_buttons = [
            [
                InlineKeyboardButton(
                    text="·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò",
                    url=f"https://t.me/{vi.username}?startgroup=true",
                )
            ],
            [InlineKeyboardButton(text=" ú·¥á ü·¥© & ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="clone_help")],
            [
                InlineKeyboardButton(text="‚ùÑ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚ùÑ", url=SUPPORT_CHANNEL),
                InlineKeyboardButton(text="‚ú® s·¥ú·¥©·¥©·¥è Ä·¥õ ‚ú®", url=SUPPORT_GROUP),
            ],
        ]

        await query.edit_message_text(
            text=PM_START_TEXT.format(
                query.from_user.first_name,
                vi.mention,
            ),
            reply_markup=InlineKeyboardMarkup(pm_buttons),
        )
    except Exception as e:
        logging.exception(e)
        return