import asyncio

from config import (
    AUTO_GCAST,
    AUTO_GCAST_MSG,
    LOGGER_ID,
    AUTO_GCAST_DELAY_TIME,
)
from YukkiMusic import app
from YukkiMusic.utils.database import get_served_users
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import FloodWait


MESSAGE = f"""–Ω—î—É, …™ ·¥Ä·¥ç {app.mention}

‚ú∞ I'·¥ç ·¥Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  ô·¥è·¥õ ·¥°…™·¥õ ú s·¥è·¥ç·¥á ·¥ús·¥á“ì·¥ú ü “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás.

S·¥ú·¥ò·¥ò·¥è Ä·¥õ…™…¥…¢ ·¥ò ü·¥Ä·¥õ“ì·¥è Ä·¥çs :
‚û™ ·¥Ä·¥ò·¥ò ü·¥á
‚û™  Ä·¥áss·¥è
‚û™ S·¥è·¥ú…¥·¥Ö·¥Ñ ü·¥è·¥ú·¥Ö
‚û™ S·¥ò·¥è·¥õ…™“ì è
‚û™  è·¥è·¥ú·¥õ·¥ú ô·¥á
‚û™ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç [ ·¥Ä·¥ú·¥Ö…™·¥è + ·¥†…™·¥Ö·¥á·¥è  ü·¥è·¥Ñ·¥Ä ü “ì…™ ü·¥á]

‚ú∞ ·¥Ä·¥Ös “ì Ä·¥á·¥á ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ  ô·¥Äs·¥á·¥Ö ·¥è…¥  è·¥ú·¥ã·¥ã…™'s  Ä·¥á·¥ò·¥è ·¥°…™·¥õ ú ·¥áx·¥õ Ä·¥Ä “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás ·¥Ä…¥·¥Ö “ì…™x·¥á·¥Ö  ô·¥ú…¢'s

‚ú∞ F·¥á·¥á ü “ì Ä·¥á·¥á ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òs."""

BUTTON = InlineKeyboardMarkup(
    [
        [
            InlineKeyboardButton(f"·ØΩ ùô∫…™·¥Ö…¥·¥Ä·¥ò ùôº·¥á ·ØΩ", url=f"https://t.me/{app.username}?startgroup=true")
        ]
    ]
)

MSG = AUTO_GCAST_MSG if AUTO_GCAST_MSG else MESSAGE

TEXT = """**·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ …™s ·¥á…¥·¥Ä ô ü·¥á·¥Ö s·¥è ·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ/ ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ …™s ·¥Ö·¥è…™…¥ …™…¥ ·¥Ä ü ü  ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥è·¥ús ü è ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs. **\n**…™·¥õ ·¥Ñ·¥Ä…¥  ô·¥á s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö  ô è ·¥ò·¥ú·¥õ ·¥†·¥Ä Ä…™·¥Ä ô ü·¥á [·¥Ä·¥ú·¥õ·¥è_…¢·¥Ñ·¥Äs·¥õ = (·¥ã·¥á·¥á·¥ò  ô ü·¥Ä…¥·¥ã & ·¥Ä…¥·¥Ö s·¥á·¥õ ·¥õ·¥è “ì·¥Ä üs·¥á)]**"""

async def send_notice():
    try:
        await app.send_message(LOGGER_ID, TEXT)
    except :
        pass

async def send_message_to_users():
    try:
        users = await get_served_users()

        for i in users:
            user_id = i.get('user_id')
            if isinstance(user_id, int): 
                try:
                    await app.send_message(user_id, text=MSG, reply_markup=BUTTON)
                except FloodWait as e:
                    await asyncio.sleep(e.value)
                except:
                    pass
    except:
        pass

async def continuous_broadcast():
    await send_notice() 
    while True:
    	try:
            await send_message_to_users()
        except:
            pass
        await asyncio.sleep(AUTO_GCAST_DELAY_TIME)
        
if AUTO_GCAST == str(True):
    asyncio.create_task(continuous_broadcast())